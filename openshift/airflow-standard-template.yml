apiVersion: v1
kind: Template
metadata:
  name: airflow-standard
  annotations:
    iconClass: "icon-openshift"
    description: "Airflow (Openshift)"
    tags: "airflow,python"
labels:
  template: "airflow-standard"
message: |
  Clean Up (all) Command:
    oc delete all,secrets,pvc -l template=airflow-celery
parameters:
- name: APPLICATION_NAME
  displayName: Application Name
  value: airflow
  required: true
- name: WORKER_MEM_LIMIT
  displayName: Build Memory Limit
  value: 2Gi
  description: Consider the Pod Quota Limits on Your namespace
- name: WORKER_CPU_LIMIT
  displayName: Build CPU Limit
  value: "1"
  description: Consider the Pod Quota Limits on Your namespace
- name: BUILD_DEPLOY_TOKEN_USERNAME
  description: "Username to allow cloning of private repos"
  displayName: "GIT Username"
- name: BUILD_DEPLOY_TOKEN_PASSWORD
  description: "Username to allow cloning of private repos"
  displayName: "GIT Password"
- name: BUILD_REF
  description: "Branch Name to build from (default: master)"
  value: master
- name: BUILD_URL
  description: "URL to git repo - https://github.com/codekow/container-airflow.git"
  value: "https://github.com/codekow/container-airflow.git"
- description: Username for PostgreSQL
  displayName: PostgreSQL Username
  from: 'user[A-Z0-9]{5}'
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for PostgreSQL
  displayName: PostgreSQL Password
  from: '[a-zA-Z0-9]{32}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Database Name for PostgreSQL
  displayName: PostgreSQL Database Name
  from: 'airflow[A-Z0-9]{5}'
  generate: expression
  name: POSTGRESQL_DATABASE
  required: true
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    runPolicy: Serial
    source:
      contextDir: /container
      git:
        httpProxy: ''
        httpsProxy: ''
        noProxy: localhost,localdomain.com,cluster.local,svc,$(KUBERNETES_SERVICE_HOST)
        ref: ${BUILD_REF}
        uri: ${BUILD_URL}
      sourceSecret:
        name: gitserver-verify
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: 'python:latest'
    triggers:
      - type: ConfigChange
      - imageChange: {}
        type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-db
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}-db
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}-db
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APPLICATION_NAME}-db
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APPLICATION_NAME}-db
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APPLICATION_NAME}-db
          image: postgresql:10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        restartPolicy: Always
        volumes:
        - emptyDir: {}
          name: postgresql-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:10
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-web
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}-web
    strategy:
      activeDeadlineSeconds: 21600
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}-web
      spec:
        containers:
        - name: webserver
          env:
          - name: EXECUTOR
            value: Local
          - name: AIRFLOW__CORE__DAG_CONCURRENCY
            value: '4'
          - name: POSTGRES_HOST
            value: ${APPLICATION_NAME}-db
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APPLICATION_NAME}-db
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APPLICATION_NAME}-db
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APPLICATION_NAME}-db
          image: ${APPLICATION_NAME}
          args:
            - webserver
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
            protocol: TCP
          volumeMounts:
          - mountPath: "/opt/app-root/src"
            name: ${APPLICATION_NAME}-vol
          - mountPath: "/opt/app-root/src/dags"
            name: ${APPLICATION_NAME}-dags
          resources:
            requests:
              cpu: "300m"
              memory: 256M
            limits:
              cpu: "${WORKER_CPU_LIMIT}"
              memory: "${WORKER_MEM_LIMIT}"
        volumes:
        - name: ${APPLICATION_NAME}-vol
          emptyDir: {}
        - name: ${APPLICATION_NAME}-dags
          emptyDir: {}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
          - webserver
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  stringData:
    database-name: ${POSTGRESQL_DATABASE}
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: ${POSTGRESQL_USER}
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-db
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-db
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}-db
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-web
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}-web
    sessionAffinity: None
    type: ClusterIP
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${APPLICATION_NAME}-web
      weight: 100
    wildcardPolicy: None
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}-pvc
    labels:
      app: ${APPLICATION_NAME}
  spec:
    accessModes:
      - "ReadWriteOnce"
    resources:
      requests:
        storage: "1Gi"
